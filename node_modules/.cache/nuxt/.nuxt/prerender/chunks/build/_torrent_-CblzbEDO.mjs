import { H as Head } from './components-CkKCuKad.mjs';
import { ref, reactive, withCtx, unref, createVNode, createBlock, createCommentVNode, openBlock, withDirectives, vModelText, isRef, withModifiers, withKeys, nextTick, useSSRContext } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue/index.mjs';
import { ssrRenderComponent, ssrInterpolate, ssrRenderAttr } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue/server-renderer/index.mjs';
import _sfc_main$1 from './AppLayout-YcpLZ4jN.mjs';
import toastr from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/toastr/toastr.js';
import Editor from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/@tinymce/tinymce-vue/lib/cjs/main/ts/index.js';
import { t as torrentService } from './torrentService-CHqQEqPf.mjs';
import { useRouter } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue-router/dist/vue-router.node.mjs';
import { d as useRoute } from './server.mjs';
import './composables-Dj0Rik_j.mjs';
import '../_/renderer.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue-bundle-renderer/dist/runtime.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/h3/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ufo/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/destr/dist/index.mjs';
import '../_/nitro.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/hookable/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ofetch/dist/node.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/node-mock-http/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unstorage/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unstorage/drivers/fs.mjs';
import 'file:///D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unstorage/drivers/fs-lite.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ohash/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/klona/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/defu/dist/defu.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/scule/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/radix3/dist/index.mjs';
import 'node:fs';
import 'node:url';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/pathe/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unhead/dist/server.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/devalue/index.js';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unhead/dist/utils.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/@inertiajs/vue3/dist/index.esm.js';
import './useAuth-COd_Gpgv.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/axios/index.js';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unctx/dist/index.mjs';

const _sfc_main = {
  __name: "[torrent]",
  __ssrInlineRender: true,
  setup(__props) {
    const route = useRoute();
    route.params.torrent;
    const router = useRouter();
    const showModal = ref(false);
    const imageUrl = ref("");
    const descriptionTextarea = ref(null);
    const imageUrlInput = ref(null);
    const torrent = ref();
    ref("<h1>Spiral: From The Book Of Saw</h1>");
    const keywords = ref("<strong>UHD</strong>, <em>HDR10</em>, Dolby Atmos");
    ref('<a href="/category/movies">Movies</a>');
    ref('<a href="/tag/uhd">UHD</a>, <a href="/tag/hdr10">HDR10</a>');
    ref("<p>Hello TinyMCE</p>");
    const editor_config = {
      plugins: [
        "code",
        "image",
        "link",
        "media"
      ],
      height: 500,
      menubar: false,
      uploadcare_public_key: "c1b96fb4f7b667a81986",
      toolbar: "bold italic underline strikethrough | link image | code | youtubeButton",
      setup: (editor) => {
        editor.ui.registry.addButton("youtubeButton", {
          text: "YouTube",
          onAction: () => {
            editor.windowManager.open({
              title: "Insert YouTube Video",
              body: {
                type: "panel",
                items: [
                  {
                    type: "input",
                    name: "url",
                    label: "YouTube URL",
                    placeholder: "https://www.youtube.com/watch?v=xxxxxx"
                  }
                ]
              },
              buttons: [
                {
                  type: "cancel",
                  text: "Close"
                },
                {
                  type: "submit",
                  text: "Insert",
                  primary: true
                }
              ],
              onSubmit: (api) => {
                const data = api.getData();
                const url = data.url.trim();
                if (url) {
                  const embedUrl = url.replace("watch?v=", "embed/");
                  const embedCode = `<iframe width="560" height="315" src="${embedUrl}" frameborder="0" allowfullscreen></iframe>`;
                  editor.insertContent(embedCode);
                }
                api.close();
              }
            });
          }
        });
      }
    };
    toastr.options = {
      closeButton: true,
      progressBar: true,
      positionClass: "toast-top-right",
      timeOut: 3e3
    };
    const form = reactive({
      language: "English",
      type: "Choose Category",
      category: "Choose One",
      tags: "",
      description: ""
    });
    const insertTag = (openTag, closeTag = "") => {
      const textarea = descriptionTextarea.value;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = textarea.value.substring(start, end);
      let newText;
      if (closeTag) {
        newText = textarea.value.substring(0, start) + openTag + selectedText + closeTag + textarea.value.substring(end);
      } else {
        newText = textarea.value.substring(0, start) + openTag + textarea.value.substring(end);
      }
      form.description = newText;
      nextTick(() => {
        const newPosition = closeTag ? start + openTag.length : start + openTag.length;
        textarea.setSelectionRange(newPosition, closeTag ? newPosition + selectedText.length : newPosition);
        textarea.focus();
      });
    };
    const hideImageModal = () => {
      showModal.value = false;
      imageUrl.value = "";
    };
    const confirmImageUrl = () => {
      if (imageUrl.value.trim()) {
        insertTag(`[img]${imageUrl.value}[/img]`);
        hideImageModal();
      }
    };
    async function saveTorrent() {
      await torrentService.saveTorrent({ torrent: torrent.value });
      toastr.success("Data saved successfully!", "Success");
      let prevPath = null;
      if ((void 0).referrer) {
        try {
          const refUrl = new URL((void 0).referrer);
          prevPath = refUrl.pathname + refUrl.search + refUrl.hash;
        } catch (e) {
          console.warn("Invalid referrer:", e);
        }
      }
      router.push(prevPath);
    }
    return (_ctx, _push, _parent, _attrs) => {
      const _component_Head = Head;
      _push(`<!--[-->`);
      _push(ssrRenderComponent(_component_Head, { title: "Your Torrents Uploads" }, null, _parent));
      _push(ssrRenderComponent(_sfc_main$1, null, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(`<div class="max-w-4xl mx-auto p-6 min-h-screen"${_scopeId}><div class="bg-gray-800 rounded-lg text-white shadow-lg p-6"${_scopeId}><h1 class="text-2xl font-bold mb-6 text-white"${_scopeId}>Edit Torrent</h1>`);
            if (unref(torrent)) {
              _push2(`<div class="space-y-6"${_scopeId}><div class="mb-4"${_scopeId}><label class="font-semibold block mb-1"${_scopeId}>Title with HTML</label><textarea rows="2" class="w-full bg-[#1F2937] border p-2 rounded" id="textarea-1"${_scopeId}>${ssrInterpolate(unref(torrent).name)}</textarea><label class="block text-sm font-medium text-gray-300 mb-2"${_scopeId}>title</label><div type="text" placeholder="enter torrent title here" class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"${_scopeId}>${unref(torrent).name ?? ""}</div></div><div class="mt-9"${_scopeId}><label class="font-semibold block mb-1"${_scopeId}>Keywords with HTML</label><textarea rows="2" class="w-full bg-[#1F2937] border p-2 rounded" id="textarea-2"${_scopeId}>${ssrInterpolate(unref(keywords))}</textarea><p class="mt-2"${_scopeId}>Preview:</p><div class="border p-2 bg-gray-500"${_scopeId}>${unref(keywords) ?? ""}</div></div><div class="mt-9"${_scopeId}><label class="font-semibold block mb-1"${_scopeId}>Tags with HTML</label><textarea rows="2" class="w-full bg-[#1F2937] border p-2 rounded" id="textarea-3"${_scopeId}>${ssrInterpolate(unref(torrent).tags)}</textarea><p class="mt-2"${_scopeId}>Preview:</p><div class="border p-2 bg-gray-500 min-h-10"${_scopeId}>${unref(torrent).tags ?? ""}</div></div><div class="flex items-center justify-between"${_scopeId}><div${_scopeId}><label class="block text-sm font-medium text-gray-300 mb-2"${_scopeId}>seeders</label><input${ssrRenderAttr("value", unref(torrent).seeders)} type="number" placeholder="enter torrent title here" class="w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"${_scopeId}></div><div${_scopeId}><label class="block text-sm font-medium text-gray-300 mb-2"${_scopeId}>leechers</label><input${ssrRenderAttr("value", unref(torrent).leechers)} type="number" placeholder="enter torrent title here" class="w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"${_scopeId}></div></div><div class="flex items-center justify-between"${_scopeId}><div${_scopeId}><label class="block text-sm font-medium text-gray-300 mb-2"${_scopeId}>uploader</label><input${ssrRenderAttr("value", unref(torrent).detail.uploader)} type="text" placeholder="enter torrent title here" class="w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"${_scopeId}></div><div${_scopeId}><label class="block text-sm font-medium text-gray-300 mb-2"${_scopeId}>downloads</label><input${ssrRenderAttr("value", unref(torrent).detail.download_count)} type="text" placeholder="enter torrent title here" class="w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"${_scopeId}></div></div><div${_scopeId}></div><div${_scopeId}>`);
              _push2(ssrRenderComponent(unref(Editor), {
                "api-key": "sw2al0fwxaqnam8j32qxgnyqpbhesllbc21vjnggat83u3f7",
                modelValue: unref(torrent).detail.full_description,
                "onUpdate:modelValue": ($event) => unref(torrent).detail.full_description = $event,
                init: editor_config
              }, null, _parent2, _scopeId));
              _push2(`</div><div class="flex justify-end"${_scopeId}><button class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"${_scopeId}> Save Torrent </button></div></div>`);
            } else {
              _push2(`<!---->`);
            }
            _push2(`</div>`);
            if (unref(showModal)) {
              _push2(`<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"${_scopeId}><div class="bg-white rounded-lg p-6 w-full max-w-md mx-4"${_scopeId}><h3 class="text-lg text-black font-semibold mb-4"${_scopeId}>1331x.to says</h3><p class="mb-4 text-black"${_scopeId}>Enter the image URL:</p><input${ssrRenderAttr("value", unref(imageUrl))} type="text" class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-4" placeholder="Enter image URL..."${_scopeId}><div class="flex justify-end gap-3"${_scopeId}><button class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"${_scopeId}> Cancel </button><button class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"${_scopeId}> OK </button></div></div></div>`);
            } else {
              _push2(`<!---->`);
            }
            _push2(`</div>`);
          } else {
            return [
              createVNode("div", { class: "max-w-4xl mx-auto p-6 min-h-screen" }, [
                createVNode("div", { class: "bg-gray-800 rounded-lg text-white shadow-lg p-6" }, [
                  createVNode("h1", { class: "text-2xl font-bold mb-6 text-white" }, "Edit Torrent"),
                  unref(torrent) ? (openBlock(), createBlock("div", {
                    key: 0,
                    class: "space-y-6"
                  }, [
                    createVNode("div", { class: "mb-4" }, [
                      createVNode("label", { class: "font-semibold block mb-1" }, "Title with HTML"),
                      withDirectives(createVNode("textarea", {
                        "onUpdate:modelValue": ($event) => unref(torrent).name = $event,
                        rows: "2",
                        class: "w-full bg-[#1F2937] border p-2 rounded",
                        id: "textarea-1"
                      }, null, 8, ["onUpdate:modelValue"]), [
                        [vModelText, unref(torrent).name]
                      ]),
                      createVNode("label", { class: "block text-sm font-medium text-gray-300 mb-2" }, "title"),
                      createVNode("div", {
                        innerHTML: unref(torrent).name,
                        type: "text",
                        placeholder: "enter torrent title here",
                        class: "w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      }, null, 8, ["innerHTML"])
                    ]),
                    createVNode("div", { class: "mt-9" }, [
                      createVNode("label", { class: "font-semibold block mb-1" }, "Keywords with HTML"),
                      withDirectives(createVNode("textarea", {
                        "onUpdate:modelValue": ($event) => isRef(keywords) ? keywords.value = $event : null,
                        rows: "2",
                        class: "w-full bg-[#1F2937] border p-2 rounded",
                        id: "textarea-2"
                      }, null, 8, ["onUpdate:modelValue"]), [
                        [vModelText, unref(keywords)]
                      ]),
                      createVNode("p", { class: "mt-2" }, "Preview:"),
                      createVNode("div", {
                        class: "border p-2 bg-gray-500",
                        innerHTML: unref(keywords)
                      }, null, 8, ["innerHTML"])
                    ]),
                    createVNode("div", { class: "mt-9" }, [
                      createVNode("label", { class: "font-semibold block mb-1" }, "Tags with HTML"),
                      withDirectives(createVNode("textarea", {
                        "onUpdate:modelValue": ($event) => unref(torrent).tags = $event,
                        rows: "2",
                        class: "w-full bg-[#1F2937] border p-2 rounded",
                        id: "textarea-3"
                      }, null, 8, ["onUpdate:modelValue"]), [
                        [vModelText, unref(torrent).tags]
                      ]),
                      createVNode("p", { class: "mt-2" }, "Preview:"),
                      createVNode("div", {
                        class: "border p-2 bg-gray-500 min-h-10",
                        innerHTML: unref(torrent).tags
                      }, null, 8, ["innerHTML"])
                    ]),
                    createVNode("div", { class: "flex items-center justify-between" }, [
                      createVNode("div", null, [
                        createVNode("label", { class: "block text-sm font-medium text-gray-300 mb-2" }, "seeders"),
                        withDirectives(createVNode("input", {
                          "onUpdate:modelValue": ($event) => unref(torrent).seeders = $event,
                          type: "number",
                          placeholder: "enter torrent title here",
                          class: "w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        }, null, 8, ["onUpdate:modelValue"]), [
                          [vModelText, unref(torrent).seeders]
                        ])
                      ]),
                      createVNode("div", null, [
                        createVNode("label", { class: "block text-sm font-medium text-gray-300 mb-2" }, "leechers"),
                        withDirectives(createVNode("input", {
                          "onUpdate:modelValue": ($event) => unref(torrent).leechers = $event,
                          type: "number",
                          placeholder: "enter torrent title here",
                          class: "w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        }, null, 8, ["onUpdate:modelValue"]), [
                          [vModelText, unref(torrent).leechers]
                        ])
                      ])
                    ]),
                    createVNode("div", { class: "flex items-center justify-between" }, [
                      createVNode("div", null, [
                        createVNode("label", { class: "block text-sm font-medium text-gray-300 mb-2" }, "uploader"),
                        withDirectives(createVNode("input", {
                          "onUpdate:modelValue": ($event) => unref(torrent).detail.uploader = $event,
                          type: "text",
                          placeholder: "enter torrent title here",
                          class: "w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        }, null, 8, ["onUpdate:modelValue"]), [
                          [vModelText, unref(torrent).detail.uploader]
                        ])
                      ]),
                      createVNode("div", null, [
                        createVNode("label", { class: "block text-sm font-medium text-gray-300 mb-2" }, "downloads"),
                        withDirectives(createVNode("input", {
                          "onUpdate:modelValue": ($event) => unref(torrent).detail.download_count = $event,
                          type: "text",
                          placeholder: "enter torrent title here",
                          class: "w-full bg-[#1F2937] p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        }, null, 8, ["onUpdate:modelValue"]), [
                          [vModelText, unref(torrent).detail.download_count]
                        ])
                      ])
                    ]),
                    createVNode("div"),
                    createVNode("div", null, [
                      createVNode(unref(Editor), {
                        "api-key": "sw2al0fwxaqnam8j32qxgnyqpbhesllbc21vjnggat83u3f7",
                        modelValue: unref(torrent).detail.full_description,
                        "onUpdate:modelValue": ($event) => unref(torrent).detail.full_description = $event,
                        init: editor_config
                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                    ]),
                    createVNode("div", { class: "flex justify-end" }, [
                      createVNode("button", {
                        onClick: saveTorrent,
                        class: "px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                      }, " Save Torrent ")
                    ])
                  ])) : createCommentVNode("", true)
                ]),
                unref(showModal) ? (openBlock(), createBlock("div", {
                  key: 0,
                  class: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50",
                  onClick: hideImageModal
                }, [
                  createVNode("div", {
                    class: "bg-white rounded-lg p-6 w-full max-w-md mx-4",
                    onClick: withModifiers(() => {
                    }, ["stop"])
                  }, [
                    createVNode("h3", { class: "text-lg text-black font-semibold mb-4" }, "1331x.to says"),
                    createVNode("p", { class: "mb-4 text-black" }, "Enter the image URL:"),
                    withDirectives(createVNode("input", {
                      "onUpdate:modelValue": ($event) => isRef(imageUrl) ? imageUrl.value = $event : null,
                      type: "text",
                      class: "w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-4",
                      placeholder: "Enter image URL...",
                      onKeyup: withKeys(confirmImageUrl, ["enter"]),
                      ref_key: "imageUrlInput",
                      ref: imageUrlInput
                    }, null, 40, ["onUpdate:modelValue"]), [
                      [vModelText, unref(imageUrl)]
                    ]),
                    createVNode("div", { class: "flex justify-end gap-3" }, [
                      createVNode("button", {
                        onClick: hideImageModal,
                        class: "px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
                      }, " Cancel "),
                      createVNode("button", {
                        onClick: confirmImageUrl,
                        class: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                      }, " OK ")
                    ])
                  ], 8, ["onClick"])
                ])) : createCommentVNode("", true)
              ])
            ];
          }
        }),
        _: 1
      }, _parent));
      _push(`<!--]-->`);
    };
  }
};
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("pages/edit/[torrent].vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};

export { _sfc_main as default };
//# sourceMappingURL=_torrent_-CblzbEDO.mjs.map
