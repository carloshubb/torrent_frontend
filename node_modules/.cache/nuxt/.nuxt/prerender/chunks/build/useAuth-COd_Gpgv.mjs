import { toRef, isRef } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue/index.mjs';
import { a as useNuxtApp } from './server.mjs';

const useStateKeyPrefix = "$s";
function useState(...args) {
  const autoKey = typeof args[args.length - 1] === "string" ? args.pop() : void 0;
  if (typeof args[0] !== "string") {
    args.unshift(autoKey);
  }
  const [_key, init] = args;
  if (!_key || typeof _key !== "string") {
    throw new TypeError("[nuxt] [useState] key must be a string: " + _key);
  }
  if (init !== void 0 && typeof init !== "function") {
    throw new Error("[nuxt] [useState] init must be a function: " + init);
  }
  const key = useStateKeyPrefix + _key;
  const nuxtApp = useNuxtApp();
  const state = toRef(nuxtApp.payload.state, key);
  if (state.value === void 0 && init) {
    const initialValue = init();
    if (isRef(initialValue)) {
      nuxtApp.payload.state[key] = initialValue;
      return initialValue;
    }
    state.value = initialValue;
  }
  return state;
}
const useUser = () => useState("user", () => null);
const useToken = () => useState("token", () => null);
function useAuth() {
  const user = useUser();
  const token = useToken();
  const isLoggedIn = () => !!token.value;
  const setAuth = (authUser, authToken) => {
    user.value = authUser;
    token.value = authToken;
  };
  const logout = () => {
    user.value = null;
    token.value = null;
  };
  return { user, token, isLoggedIn, setAuth, logout };
}

export { useAuth as u };
//# sourceMappingURL=useAuth-COd_Gpgv.mjs.map
