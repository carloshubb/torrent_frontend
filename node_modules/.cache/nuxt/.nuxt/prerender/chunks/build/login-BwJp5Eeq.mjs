import { H as Head } from './components-CkKCuKad.mjs';
import { ref, withCtx, unref, createVNode, createBlock, createCommentVNode, openBlock, toDisplayString, withModifiers, mergeProps, useModel, computed, useSSRContext } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue/index.mjs';
import { ssrRenderComponent, ssrInterpolate, ssrIncludeBooleanAttr, ssrRenderAttrs, ssrRenderSlot, ssrGetDynamicModelProps, ssrLooseContain } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue/server-renderer/index.mjs';
import _sfc_main$5 from './GuestLayout-mdBovBHJ.mjs';
import { t as torrentService } from './torrentService-CHqQEqPf.mjs';
import { u as useAuth } from './useAuth-COd_Gpgv.mjs';
import { useForm } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/@inertiajs/vue3/dist/index.esm.js';
import { useRouter } from 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue-router/dist/vue-router.node.mjs';
import './composables-Dj0Rik_j.mjs';
import './server.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ofetch/dist/node.mjs';
import '../_/renderer.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/vue-bundle-renderer/dist/runtime.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/h3/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ufo/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/destr/dist/index.mjs';
import '../_/nitro.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/hookable/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/node-mock-http/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unstorage/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unstorage/drivers/fs.mjs';
import 'file:///D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unstorage/drivers/fs-lite.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ohash/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/klona/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/defu/dist/defu.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/scule/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/radix3/dist/index.mjs';
import 'node:fs';
import 'node:url';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/pathe/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unhead/dist/server.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/devalue/index.js';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unhead/dist/utils.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unctx/dist/index.mjs';
import 'file://D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/axios/index.js';

const _sfc_main$4 = {
  __name: "Checkbox",
  __ssrInlineRender: true,
  props: {
    checked: {
      type: [Array, Boolean],
      required: true
    },
    value: {
      default: null
    }
  },
  emits: ["update:checked"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const props = __props;
    const proxyChecked = computed({
      get() {
        return props.checked;
      },
      set(val) {
        emit("update:checked", val);
      }
    });
    return (_ctx, _push, _parent, _attrs) => {
      let _temp0;
      _push(`<input${ssrRenderAttrs((_temp0 = mergeProps({
        type: "checkbox",
        value: __props.value,
        checked: Array.isArray(proxyChecked.value) ? ssrLooseContain(proxyChecked.value, __props.value) : proxyChecked.value,
        class: "rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500"
      }, _attrs), mergeProps(_temp0, ssrGetDynamicModelProps(_temp0, proxyChecked.value))))}>`);
    };
  }
};
const _sfc_setup$4 = _sfc_main$4.setup;
_sfc_main$4.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/Checkbox.vue");
  return _sfc_setup$4 ? _sfc_setup$4(props, ctx) : void 0;
};
const _sfc_main$3 = {
  __name: "InputError",
  __ssrInlineRender: true,
  props: {
    message: {
      type: String
    }
  },
  setup(__props) {
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({
        style: __props.message ? null : { display: "none" }
      }, _attrs))}><p class="text-sm text-red-600">${ssrInterpolate(__props.message)}</p></div>`);
    };
  }
};
const _sfc_setup$3 = _sfc_main$3.setup;
_sfc_main$3.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/InputError.vue");
  return _sfc_setup$3 ? _sfc_setup$3(props, ctx) : void 0;
};
const _sfc_main$2 = {
  __name: "InputLabel",
  __ssrInlineRender: true,
  props: {
    value: {
      type: String
    }
  },
  setup(__props) {
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<label${ssrRenderAttrs(mergeProps({ class: "block text-sm font-medium text-gray-700" }, _attrs))}>`);
      if (__props.value) {
        _push(`<span>${ssrInterpolate(__props.value)}</span>`);
      } else {
        _push(`<span>`);
        ssrRenderSlot(_ctx.$slots, "default", {}, null, _push, _parent);
        _push(`</span>`);
      }
      _push(`</label>`);
    };
  }
};
const _sfc_setup$2 = _sfc_main$2.setup;
_sfc_main$2.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/InputLabel.vue");
  return _sfc_setup$2 ? _sfc_setup$2(props, ctx) : void 0;
};
const _sfc_main$1 = {
  __name: "TextInput",
  __ssrInlineRender: true,
  props: {
    "modelValue": {
      type: String,
      required: true
    },
    "modelModifiers": {}
  },
  emits: ["update:modelValue"],
  setup(__props, { expose: __expose }) {
    const model = useModel(__props, "modelValue");
    const input = ref(null);
    __expose({ focus: () => input.value.focus() });
    return (_ctx, _push, _parent, _attrs) => {
      let _temp0;
      _push(`<input${ssrRenderAttrs((_temp0 = mergeProps({
        class: "rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500",
        ref_key: "input",
        ref: input
      }, _attrs), mergeProps(_temp0, ssrGetDynamicModelProps(_temp0, model.value))))}>`);
    };
  }
};
const _sfc_setup$1 = _sfc_main$1.setup;
_sfc_main$1.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/TextInput.vue");
  return _sfc_setup$1 ? _sfc_setup$1(props, ctx) : void 0;
};
const _sfc_main = {
  __name: "login",
  __ssrInlineRender: true,
  setup(__props) {
    const router = useRouter();
    const { setAuth } = useAuth();
    const status = ref("");
    const form = useForm({
      email: "",
      password: "",
      remember: false
    });
    const str_error = ref("");
    async function submit() {
      try {
        const response = await torrentService.login(form);
        const token = response.token;
        localStorage.setItem("token", token);
        setAuth(response.user, response.token);
        localStorage.setItem("user", JSON.stringify(response.user));
        router.push("/");
      } catch (error) {
        str_error.value = "Invalid credentials";
      }
    }
    return (_ctx, _push, _parent, _attrs) => {
      const _component_Head = Head;
      _push(ssrRenderComponent(_sfc_main$5, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(_component_Head, { title: "Log in" }, null, _parent2, _scopeId));
            _push2(`<div class="w-full flex justify-center items-center min-h-screen bg-gradient-to-br from-blue-50 to-white px-4"${_scopeId}><div class="w-full max-w-md bg-white rounded-2xl shadow-lg p-8 space-y-6 animate-fade-in"${_scopeId}><h1 class="text-2xl font-bold text-center text-gray-800"${_scopeId}>Welcome Torrent</h1><p class="text-center text-gray-500 text-sm"${_scopeId}>Sign in to your account</p>`);
            if (unref(status)) {
              _push2(`<div class="text-green-600 text-center font-medium"${_scopeId}>${ssrInterpolate(unref(status))}</div>`);
            } else {
              _push2(`<!---->`);
            }
            _push2(`<form class="space-y-4"${_scopeId}><div${_scopeId}>`);
            _push2(ssrRenderComponent(_sfc_main$2, {
              for: "email",
              value: "Email",
              class: "font-medium text-gray-700"
            }, null, _parent2, _scopeId));
            _push2(ssrRenderComponent(_sfc_main$1, {
              id: "email",
              type: "email",
              class: "block w-full focus:outline-none border border-gray-600 px-4 py-2 rounded focus:border-orange-500",
              modelValue: unref(form).email,
              "onUpdate:modelValue": ($event) => unref(form).email = $event,
              required: "",
              autofocus: "",
              autocomplete: "username"
            }, null, _parent2, _scopeId));
            _push2(`</div><div${_scopeId}>`);
            _push2(ssrRenderComponent(_sfc_main$2, {
              for: "password",
              value: "Password",
              class: "font-medium text-gray-700"
            }, null, _parent2, _scopeId));
            _push2(ssrRenderComponent(_sfc_main$1, {
              id: "password",
              type: "password",
              class: "block w-full focus:outline-none border border-gray-600 px-4 py-2 rounded focus:border-orange-500",
              modelValue: unref(form).password,
              "onUpdate:modelValue": ($event) => unref(form).password = $event,
              required: "",
              autocomplete: "current-password"
            }, null, _parent2, _scopeId));
            _push2(ssrRenderComponent(_sfc_main$3, {
              class: "mt-1 text-sm",
              message: unref(form).errors.password
            }, null, _parent2, _scopeId));
            _push2(`</div><p class="block w-full text-center text-red-800"${_scopeId}>${ssrInterpolate(unref(str_error))}</p><div class="flex items-center"${_scopeId}>`);
            _push2(ssrRenderComponent(_sfc_main$4, {
              name: "remember",
              checked: unref(form).remember,
              "onUpdate:checked": ($event) => unref(form).remember = $event
            }, null, _parent2, _scopeId));
            _push2(`<span class="ml-2 text-sm text-gray-600"${_scopeId}>Remember me</span></div><div class="hidden md:flex justify-between gap-6 px-5"${_scopeId}><button type="submit"${ssrIncludeBooleanAttr(unref(form).processing) ? " disabled" : ""} class="w-full mt-4 py-2 rounded-lg text-white font-semibold bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 transition duration-300 ease-in-out shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"${_scopeId}> Log in </button></div></form></div></div>`);
          } else {
            return [
              createVNode(_component_Head, { title: "Log in" }),
              createVNode("div", { class: "w-full flex justify-center items-center min-h-screen bg-gradient-to-br from-blue-50 to-white px-4" }, [
                createVNode("div", { class: "w-full max-w-md bg-white rounded-2xl shadow-lg p-8 space-y-6 animate-fade-in" }, [
                  createVNode("h1", { class: "text-2xl font-bold text-center text-gray-800" }, "Welcome Torrent"),
                  createVNode("p", { class: "text-center text-gray-500 text-sm" }, "Sign in to your account"),
                  unref(status) ? (openBlock(), createBlock("div", {
                    key: 0,
                    class: "text-green-600 text-center font-medium"
                  }, toDisplayString(unref(status)), 1)) : createCommentVNode("", true),
                  createVNode("form", {
                    onSubmit: withModifiers(submit, ["prevent"]),
                    class: "space-y-4"
                  }, [
                    createVNode("div", null, [
                      createVNode(_sfc_main$2, {
                        for: "email",
                        value: "Email",
                        class: "font-medium text-gray-700"
                      }),
                      createVNode(_sfc_main$1, {
                        id: "email",
                        type: "email",
                        class: "block w-full focus:outline-none border border-gray-600 px-4 py-2 rounded focus:border-orange-500",
                        modelValue: unref(form).email,
                        "onUpdate:modelValue": ($event) => unref(form).email = $event,
                        required: "",
                        autofocus: "",
                        autocomplete: "username"
                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                    ]),
                    createVNode("div", null, [
                      createVNode(_sfc_main$2, {
                        for: "password",
                        value: "Password",
                        class: "font-medium text-gray-700"
                      }),
                      createVNode(_sfc_main$1, {
                        id: "password",
                        type: "password",
                        class: "block w-full focus:outline-none border border-gray-600 px-4 py-2 rounded focus:border-orange-500",
                        modelValue: unref(form).password,
                        "onUpdate:modelValue": ($event) => unref(form).password = $event,
                        required: "",
                        autocomplete: "current-password"
                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                      createVNode(_sfc_main$3, {
                        class: "mt-1 text-sm",
                        message: unref(form).errors.password
                      }, null, 8, ["message"])
                    ]),
                    createVNode("p", { class: "block w-full text-center text-red-800" }, toDisplayString(unref(str_error)), 1),
                    createVNode("div", { class: "flex items-center" }, [
                      createVNode(_sfc_main$4, {
                        name: "remember",
                        checked: unref(form).remember,
                        "onUpdate:checked": ($event) => unref(form).remember = $event
                      }, null, 8, ["checked", "onUpdate:checked"]),
                      createVNode("span", { class: "ml-2 text-sm text-gray-600" }, "Remember me")
                    ]),
                    createVNode("div", { class: "hidden md:flex justify-between gap-6 px-5" }, [
                      createVNode("button", {
                        type: "submit",
                        disabled: unref(form).processing,
                        class: "w-full mt-4 py-2 rounded-lg text-white font-semibold bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 transition duration-300 ease-in-out shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
                      }, " Log in ", 8, ["disabled"])
                    ])
                  ], 32)
                ])
              ])
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
};
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("pages/login.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};

export { _sfc_main as default };
//# sourceMappingURL=login-BwJp5Eeq.mjs.map
