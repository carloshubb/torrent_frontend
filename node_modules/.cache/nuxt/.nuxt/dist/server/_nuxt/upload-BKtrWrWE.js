import { mergeProps, ref, useSSRContext, withCtx, unref, createBlock, createCommentVNode, openBlock } from "vue";
import { ssrRenderAttrs, ssrRenderClass, ssrRenderAttr, ssrInterpolate, ssrIncludeBooleanAttr, ssrLooseContain, ssrLooseEqual, ssrRenderList, ssrRenderComponent } from "vue/server-renderer";
import _sfc_main$2 from "./AppLayout-YcpLZ4jN.js";
import { t as torrentService } from "./torrentService-CHqQEqPf.js";
import { _ as _export_sfc } from "../server.mjs";
import { useRouter } from "vue-router";
import "@inertiajs/vue3";
import "./useAuth-COd_Gpgv.js";
import "axios";
import "D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ofetch/dist/node.mjs";
import "#internal/nuxt/paths";
import "D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/hookable/dist/index.mjs";
import "D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/unctx/dist/index.mjs";
import "D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/h3/dist/index.mjs";
import "D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/radix3/dist/index.mjs";
import "D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/defu/dist/defu.mjs";
import "D:/_4_Work/Web/torrent-nuxt/frontend/node_modules/ufo/dist/index.mjs";
const _sfc_main$1 = {
  name: "BlogPostForm",
  props: {
    categories: {
      type: Array
    }
  },
  data(props) {
    const categories = ref([]);
    const sub_categories = ref([]);
    categories.value = props.categories ? props.categories : [];
    sub_categories.value = props.categories ? props.categories[0].subcategory : [];
    return {
      isSubmitting: false,
      selectedFilePath: "",
      showToast: false,
      copiedUrl: null,
      categories,
      sub_categories,
      announceUrls: [
        { id: 1, link: "http://tracker.example.com:8080/announce" },
        { id: 2, link: "http://tracker2.example.com:6969/announce" }
      ],
      formatTools: ["Bold", "Italic", "Underline", "Quote", "Code", "List", "Link", "Full Screen", "Image", "YouTube"],
      form: {
        title: "",
        content: "",
        language: "",
        category: "",
        subcategory: "",
        tags: "",
        description: "",
        torrentFile: null
      }
    };
  },
  methods: {
    // Open file dialog
    openFileDialog() {
      this.$refs.fileInput.click();
    },
    // Handle file selection
    handleFileSelect(event) {
      const file = event.target.files[0];
      if (file) {
        this.form.torrentFile = file;
        this.selectedFilePath = file.name;
        this.showToast = true;
        setTimeout(() => this.showToast = false, 3e3);
      }
    },
    // Submit form with file
    async submitPost() {
      this.isSubmitting = true;
      try {
        if (!this.form.title || !this.form.content || !this.form.language || !this.form.category || !this.form.subcategory || !this.form.torrentFile) {
          alert("Please fill in all required fields and select a torrent file");
          return;
        }
        const formData = new FormData();
        Object.keys(this.form).forEach((key) => {
          if (key === "torrentFile" && this.form[key]) {
            formData.append("torrent_file", this.form[key]);
          } else if (this.form[key] && key !== "torrentFile") {
            formData.append(key, this.form[key]);
          }
        });
        const token = localStorage.getItem("token");
        try {
          const response2 = await torrentService.createTorrent(formData);
          console.log(response2);
        } catch (error) {
          console.error("Upload failed:", error.response?.data || error.message);
        }
        this.resetForm();
        this.isSubmitting = false;
        if (response.success) {
          const result = await response.json();
          this.resetForm();
        } else {
          throw new Error("Upload failed");
        }
      } catch (error) {
      } finally {
        this.isSubmitting = false;
      }
    },
    // Copy URL to clipboard
    async copyToClipboard(text) {
      try {
        await (void 0).clipboard.writeText(text);
        const urlObj = this.announceUrls.find((url) => url.link === text);
        this.copiedUrl = urlObj.id;
        setTimeout(() => this.copiedUrl = null, 2e3);
      } catch (err) {
        console.error("Failed to copy: ", err);
      }
    },
    // Apply text formatting
    applyFormat(tool) {
      const textarea = this.$refs.descriptionTextarea;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = this.form.description.substring(start, end);
      let formattedText = "";
      switch (tool) {
        case "Bold":
          formattedText = `<b>${selectedText}</b>`;
          break;
        case "Italic":
          formattedText = `<p style = 'font-style: italic'>${selectedText}</p>`;
          break;
        case "Underline":
          formattedText = `<p style = 'text-decoration: underline'>${selectedText}</p>`;
          break;
        case "Quote":
          formattedText = `<blockquote> ${selectedText}</blockquote>`;
          break;
        case "Code":
          formattedText = `<code>${selectedText}</code>`;
          break;
        case "List":
          formattedText = `<ul><li>${selectedText}</li></ul>`;
          break;
        case "Link":
          formattedText = `<a href = '${selectedText}' ></a>`;
          break;
        case "Image":
          formattedText = `<img src = ${selectedText} />`;
          break;
        case "YouTube":
          formattedText = `<video src = ${selectedText} />`;
          break;
        default:
          formattedText = selectedText;
      }
      this.form.description = this.form.description.substring(0, start) + formattedText + this.form.description.substring(end);
      this.$nextTick(() => {
        textarea.focus();
        textarea.setSelectionRange(start + formattedText.length, start + formattedText.length);
      });
    },
    // Reset form
    resetForm() {
      this.form = {
        title: "",
        content: "",
        language: "",
        category: "",
        sub_categories: "",
        type: "",
        tags: "",
        description: "",
        torrentFile: null
      };
      this.selectedFilePath = "";
      this.$refs.fileInput.value = "";
    },
    handleCategoryChange() {
      const selected = this.categories.find((cat) => cat.id === parseInt(this.form.category));
      this.sub_categories = selected ? selected.subcategory : [];
      this.form.subcategory = "";
    }
  },
  mounted() {
  }
};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(mergeProps({ class: "mt-5 bg-slate-600 rounded" }, _attrs))} data-v-410278e3><div class="max-w-4xl mx-auto" data-v-410278e3>`);
  if ($data.showToast) {
    _push(`<div class="${ssrRenderClass([{ "translate-y-0 opacity-100": $data.showToast, "translate-y-2 opacity-0": !$data.showToast }, "fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300"])}" data-v-410278e3><div class="flex items-center" data-v-410278e3><svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" data-v-410278e3><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" data-v-410278e3></path></svg> URL copied to clipboard! </div></div>`);
  } else {
    _push(`<!---->`);
  }
  _push(`</div><div class="container mx-auto text-white" data-v-410278e3><div class="shadow-lg p-6" data-v-410278e3><h2 class="text-2xl font-bold mb-6 border-b-2 border-orange-400 pb-2" data-v-410278e3> Create New Blog Post </h2><form class="space-y-6" data-v-410278e3><div data-v-410278e3><label for="title" class="block text-sm font-semibold mb-2" data-v-410278e3>Title</label><input type="text" id="title"${ssrRenderAttr("value", $data.form.title)} class="w-full px-3 py-2 border text-gray-700 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="Enter post title" required data-v-410278e3></div><div data-v-410278e3><label for="torrentFile" class="block text-sm font-semibold mb-2" data-v-410278e3>Torrent File</label><div class="flex items-center space-x-3" data-v-410278e3><input type="file" id="torrentFile" accept=".torrent" class="hidden text-gray-700" data-v-410278e3><input type="text"${ssrRenderAttr("value", $data.selectedFilePath)} readonly class="flex-1 px-3 py-2 border text-gray-700 border-gray-300 rounded-md shadow-sm bg-gray-50 focus:outline-none" placeholder="No file selected" data-v-410278e3><button type="button" class="bg-orange-400 hover:bg-orange-500 text-white font-bold px-4 py-2 rounded transition-colors" data-v-410278e3> Browse </button></div><p class="text-xs mt-1" data-v-410278e3>Select a .torrent file to upload</p></div><div data-v-410278e3><label for="content" class="block text-sm font-semibold mb-2" data-v-410278e3>Content Text</label><textarea id="content" rows="6" class="w-full px-3 py-2 border text-gray-700 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors resize-vertical" placeholder="Enter your blog post content here..." required data-v-410278e3>${ssrInterpolate($data.form.content)}</textarea></div><div class="grid grid-cols-1 md:grid-cols-2 gap-6" data-v-410278e3><div data-v-410278e3><label for="language" class="block text-sm font-semibold mb-2" data-v-410278e3>Language</label><select id="language" class="w-full px-3 py-2 text-gray-700 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" required data-v-410278e3><option value="" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.language) ? ssrLooseContain($data.form.language, "") : ssrLooseEqual($data.form.language, "")) ? " selected" : ""}>Choose language</option><option value="english" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.language) ? ssrLooseContain($data.form.language, "english") : ssrLooseEqual($data.form.language, "english")) ? " selected" : ""}>English</option><option value="spanish" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.language) ? ssrLooseContain($data.form.language, "spanish") : ssrLooseEqual($data.form.language, "spanish")) ? " selected" : ""}>Spanish</option><option value="french" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.language) ? ssrLooseContain($data.form.language, "french") : ssrLooseEqual($data.form.language, "french")) ? " selected" : ""}>French</option><option value="german" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.language) ? ssrLooseContain($data.form.language, "german") : ssrLooseEqual($data.form.language, "german")) ? " selected" : ""}>German</option><option value="chinese" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.language) ? ssrLooseContain($data.form.language, "chinese") : ssrLooseEqual($data.form.language, "chinese")) ? " selected" : ""}>Chinese</option><option value="japanese" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.language) ? ssrLooseContain($data.form.language, "japanese") : ssrLooseEqual($data.form.language, "japanese")) ? " selected" : ""}>Japanese</option></select></div><div data-v-410278e3><div class="grid grid-cols-2 gap-3" data-v-410278e3><div data-v-410278e3><label for="category" class="block text-sm font-semibold mb-2" data-v-410278e3>Category</label><select id="category" class="w-full text-gray-700 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" required data-v-410278e3><option value="" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.category) ? ssrLooseContain($data.form.category, "") : ssrLooseEqual($data.form.category, "")) ? " selected" : ""}>Choose One</option><!--[-->`);
  ssrRenderList($data.categories, (cat) => {
    _push(`<option${ssrRenderAttr("value", cat.id)} data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.category) ? ssrLooseContain($data.form.category, cat.id) : ssrLooseEqual($data.form.category, cat.id)) ? " selected" : ""}>${ssrInterpolate(cat.name)}</option>`);
  });
  _push(`<!--]--></select></div><div data-v-410278e3><label for="type" class="block text-sm font-semibold mb-2" data-v-410278e3>Type</label><select id="subcategory" class="w-full px-3 py-2 border text-gray-700 border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" required data-v-410278e3><option value="" data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.subcategory) ? ssrLooseContain($data.form.subcategory, "") : ssrLooseEqual($data.form.subcategory, "")) ? " selected" : ""}>Choose sub category</option><!--[-->`);
  ssrRenderList($data.sub_categories, (item) => {
    _push(`<option${ssrRenderAttr("value", item.id)} data-v-410278e3${ssrIncludeBooleanAttr(Array.isArray($data.form.subcategory) ? ssrLooseContain($data.form.subcategory, item.id) : ssrLooseEqual($data.form.subcategory, item.id)) ? " selected" : ""}>${ssrInterpolate(item.name)}</option>`);
  });
  _push(`<!--]--></select></div></div></div></div><div data-v-410278e3><label for="tags" class="block text-sm font-semibold mb-2" data-v-410278e3>Tags</label><input type="text" id="tags"${ssrRenderAttr("value", $data.form.tags)} class="w-full text-gray-700 bg-white px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-colors" placeholder="Enter tags separated by commas" data-v-410278e3><p class="text-xs mt-1" data-v-410278e3>Use commas to separate multiple tags (e.g., web design, css, html)</p></div><div data-v-410278e3><label for="description" class="block text-sm font-semibold mb-2" data-v-410278e3>Format Description</label><div class="border border-gray-300 rounded-md p-3 bg-gray-50" data-v-410278e3><div class="flex flex-wrap gap-2 text-xs mb-3" data-v-410278e3><!--[-->`);
  ssrRenderList($data.formatTools, (tool) => {
    _push(`<button type="button" class="px-2 py-1 bg-gray-500 text-white hover:bg-gray-400 rounded transition-colors" data-v-410278e3>${ssrInterpolate(tool)}</button>`);
  });
  _push(`<!--]--></div><textarea rows="4" class="w-full px-3 py-2 text-gray-700 border-2 bg-white rounded focus:outline-none focus:ring-2 focus:ring-orange-500 resize-vertical" placeholder="Enter formatted description here..." data-v-410278e3>${ssrInterpolate($data.form.description)}</textarea></div></div><div class="flex justify-end pt-6 border-t border-gray-200" data-v-410278e3><button type="submit"${ssrIncludeBooleanAttr($data.isSubmitting) ? " disabled" : ""} class="bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 disabled:opacity-50 disabled:cursor-not-allowed text-white font-semibold py-3 px-8 rounded-lg shadow-lg transform hover:scale-105 transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-orange-300" data-v-410278e3>${ssrInterpolate($data.isSubmitting ? "UPLOADING..." : "UPLOAD")}</button></div></form></div></div></div>`);
}
const _sfc_setup$1 = _sfc_main$1.setup;
_sfc_main$1.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/TorrentAdminUpload.vue");
  return _sfc_setup$1 ? _sfc_setup$1(props, ctx) : void 0;
};
const TorrentAdminUpload = /* @__PURE__ */ Object.assign(_export_sfc(_sfc_main$1, [["ssrRender", _sfc_ssrRender], ["__scopeId", "data-v-410278e3"]]), { __name: "TorrentAdminUpload" });
const _sfc_main = {
  __name: "upload",
  __ssrInlineRender: true,
  setup(__props) {
    useRouter();
    const categories = ref([]);
    ref(false);
    return (_ctx, _push, _parent, _attrs) => {
      _push(ssrRenderComponent(_sfc_main$2, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            if (unref(categories).length > 0) {
              _push2(ssrRenderComponent(TorrentAdminUpload, { categories: unref(categories) }, null, _parent2, _scopeId));
            } else {
              _push2(`<!---->`);
            }
          } else {
            return [
              unref(categories).length > 0 ? (openBlock(), createBlock(TorrentAdminUpload, {
                key: 0,
                categories: unref(categories)
              }, null, 8, ["categories"])) : createCommentVNode("", true)
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
};
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("pages/upload.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
export {
  _sfc_main as default
};
//# sourceMappingURL=upload-BKtrWrWE.js.map
